noindex: true
author Daniel Lumertz

// just to debug
//options:gmem=VolumeController

desc:Layers Volume
slider1:gain_db=1<0,1,0.01>gain (dB)
slider2:is_chase=1<0,1,1{No,Yes}>Chase MIDI notes when gain slider goes to 1.
slider3:is_chase_once=0<0,1,1{No,Yes}>Chase once, when the slider goes to 1.
slider4:is_scale_velocity=0<0,1,1{No,Yes}>Scale velocity.


@init  
  function add_to_table (table,pitch,channel,velocity) // buf[1] , buf[0]&0x0F, buf[2]
  local(bol,cnt)
  global(notes_poly,channel_v, pitch_v, velocity_v)
  (
    bol = 1; 
    cnt = 0;
    while (bol) (
      table[cnt] == 0 ? (
        table[cnt] = 1;
        table[cnt + pitch_v] = pitch; // pitch
        table[cnt + channel_v] = channel; // channel
        table[cnt + velocity_v] = velocity;
        
        bol = 0; // break the loop 
      );
      cnt += 1;
      cnt == notes_poly ? (
        bol = 0 // break at the end
      ); 
    );
  );
  
  function remove_table(table,pitch,channel)
  local(bol,cnt)
  global(notes_poly,channel_v, pitch_v, velocity_v)
  (
    bol = 1;
    cnt = 0;
    while (bol) (
      table[cnt] && table[cnt + pitch_v] == pitch && table[cnt + channel_v] == channel ? ( // same note and same channel
        table[cnt] = 0;
        table[cnt + pitch_v] = 0;
        table[cnt + channel_v] = 0;
        table[cnt + velocity_v] = 0;
        bol = 0;
      );
      
      cnt += 1;
      cnt == notes_poly ? (
        bol = 0 // break at the end
      ); 
    );
  );

  function manage_note_tabe (note_table,buf) // table to add notes, midi messages, cnt of notes on
  local(bol, cnt)
  global(temp_note_counter, notes_poly, channel_v, pitch_v, velocity_v) // before calling this function make temp_note_counter = the bariable that contains the note counter
  (
  
    // manage the note on table
    buf[0]&0xF0 == 0x90 && buf[2] !=0 ? (
      //////note on, add to the table
      // find a clear index
      temp_note_counter += 1;
      add_to_table(note_table,buf[1],buf[0]&0x0F,buf[2]);
      
    ):((buf[0]&0xF0 == $x80) | (buf[0]&0xF == 0x90 && buf[2] == 0))?( //note off
      /////note off, remove this note from the note on table
      temp_note_counter -= 1;
      temp_note_counter = max(0,temp_note_counter);// clamp at 0
      remove_table(note_table,buf[1],buf[0]&0x0F);
      
      
    ):( (buf[0]&0xF0 == $xB0) &&  buf[1] == 123 )?( // all notes off (CC 123)
      // all notes off, clean the table
      temp_note_counter = 0;
      loop(cnt = 0; notes_poly,
        note_table[cnt] = 0;
        note_table[cnt + pitch_v] = 0;
        note_table[cnt + channel_v] = 0; 
        note_table[cnt + velocity_v] = 0;
        cnt += 1;
      );
    );
  );
  ////////// Options
  ext_noinit = 1.0; //this code not execute on start of playback or samplerate changes
  
  // Audio volume:
  last_gain = gain_db;
  
  //////////// MIDI Constants:
  buf = 10000;
  maxlen = 65536;
  // index at the table.
  notes_poly = 256; // max number of polyphony 
  pitch_v = notes_poly; // index from the table it start being pitch
  channel_v = notes_poly*2; // index from the table it start being channel
  velocity_v = notes_poly*3;
  note_count = 0; // count note on played while slider at 1
  note_filter_count = 0; // count note on filtered while slidet at 0. to chase midi
  // notes_on is a table with [notes_poly] possible n otes to store in it  it is divided in 3 part first between [0 - notes_poly-1] is a boolean if the note is turned on. between [ notes_poly - notes_poly*2-1] is the pitch, between [ notes_poly*2 - notes_poly*3-1] is the channel 
  // note_on_filter same as note_on but for filtered notes when slider is at 0 
  notes_on = 0;
  note_on_filter = notes_poly*4;
@slider
  next_gain = gain_db;

  
@block
  nch=get_host_numchan();
  d_gain = (next_gain - last_gain)/samplesblock;
  
  // MIDI: 
  // Manage the current note_on and note_on_filter tables. Chase MIDI.
  // when less than 1 send notes off if needed, at 1 send supressed notes if midi chase.
  gain_db == 0 && note_count > 0 ? (  // if there is any note at the notes_on send notes off! clean the table
    loop (cnt = 0; notes_poly,
      notes_on[cnt] ? (
        ch = notes_on[cnt + channel_v];
        msg1 = 0x80|ch; 
        msg2 = notes_on[cnt + pitch_v];
        vel = notes_on[cnt + velocity_v];
        msg3 = 0;
        
        // send the note 
        midisend(0,msg1,msg2,msg3);  
        !is_chase_once ? ( // if chase many time (not once) then add to the filtered table. Then if the user goes to 1 many times it will trigger many times the notes.
          add_to_table (note_on_filter,msg2,ch,vel);// add to the played notes
          note_filter_count += 1;
        );
        
        notes_on[cnt] = 0; 
        notes_on[cnt + pitch_v] = 0;
        notes_on[cnt + channel_v] = 0; 
      );
      cnt += 1;  
    );
    cnt = 0;
    note_count = 0;
  ): gain_db > 0 && note_filter_count > 0 ? (
    loop (cnt = 0; notes_poly, 
      note_on_filter[cnt] ? (
        ch = note_on_filter[cnt + channel_v];
        msg1 = 0x90|ch; 
        msg2 = note_on_filter[cnt + pitch_v];
        msg3 = note_on_filter[cnt + velocity_v];
        
        // send the note
        is_chase ? (
        
          //scale velocity
          is_scale_velocity ? (
            msg3 = msg3 * gain_db
          );
          
          //send midi and add to the notes on table
          midisend(0,msg1,msg2,msg3);  
          add_to_table (notes_on,msg2,ch,msg3);// add to the played notes
          note_count += 1;
        );
        
        // remove from the filtered table
        note_on_filter[cnt] = 0; 
        note_on_filter[cnt + pitch_v]  = 0;
        note_on_filter[cnt + channel_v] = 0; 
        
      );
      cnt += 1;
    );
    cnt = 0;
    note_filter_count = 0;
  );  
  
  // Get the MIDI input, filter or passthough
  while ((recvlen = midirecv_buf(offset,buf,maxlen)) > 0) (
    // slider is equal to 1 ( manage the notes on table + passtrough midi)
    gain_db > 0 ? ( // passthrough
    
      temp_note_counter = note_count; 
      manage_note_tabe (note_on,buf);
      note_count = temp_note_counter;
      temp_note_counter = 0;
      
      // change note velocity if needed
      is_scale_velocity && buf[0]&0xF0 == 0x90 ? (
        buf[2] = buf[2] * gain_db;
      );
      
      midisend_buf(offset,buf,recvlen); 
    ) : (
    
      temp_note_counter = note_filter_count; 
      manage_note_tabe (note_on_filter,buf);
      note_filter_count = temp_note_counter;
      temp_note_counter = 0;
    );
  );
  

  //count_table(a);
  
@sample
  // AUDIO:
  loop(i=0; nch,
    spl(i)*= last_gain; 
    i += 1;
  );
  last_gain += d_gain;