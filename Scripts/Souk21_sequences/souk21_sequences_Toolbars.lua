  -- This file is autogenerated, do not modify or move
  -- VER:5
--[[
STYLE BG 0 FG ffffff FC ff5555 HOVER ffaaaa FNTSZ 13.0 PAD 20.0 DESC 20.0 LINE 5.0 POS 0 SIZE 0 X  Y  W  H  MH 0 MV 0 FONT Verdana
KEY 111 SHIFT false CMD false ALT false CTRL false NATIVE true ID 41681 EXIT true HIDDEN false DISPLAY Orchestration Toolbar
KEY 114 SHIFT false CMD false ALT false CTRL false NATIVE true ID 41680 EXIT true HIDDEN false DISPLAY ReaCoMa Toolbar
]]
function UI(actions, layout, shown, window_name)
    function ToRGB(int)
        local r = ((int >> 16) & 255) / 255.0
        local g = ((int >> 8) & 255) / 255.0
        local b = (int & 255) / 255.0
        return r, g, b
    end

    function SetColor(int)
        local r, g, b = ToRGB(int)
        gfx.set(r, g, b)
    end

    if layout.first_frame then
        --Before doing anything we init window, so gfx_retina is computed, etc
        --We still have first frame work to do later so we don't set first_frame = false
        gfx.init(window_name, 0, 0, 0, 0, 0)
        gfx.ext_retina = 1
        layout.hwnd = reaper.JS_Window_Find(window_name, true)
        reaper.JS_Window_SetStyle(layout.hwnd, "POPUP")
        reaper.JS_Window_SetOpacity(layout.hwnd, "ALPHA", 0)
        reaper.JS_Window_SetFocus(layout.hwnd)
    end

    local longest_key = ""
    local longest_name = ""

    for _, action in ipairs(actions) do
        if not action.hidden then
            if action.text == nil then
                if #action.key_text > #longest_key then
                    longest_key = action.key_text
                end
                if #action.display_name > #longest_name then
                    longest_name = action.display_name
                end
            else
                if #action.text > #longest_name then
                    longest_name = action.text
                end
            end
        end
    end

    local os = reaper.GetOS()
    local is_mac = os == "OSX32" or os == "OSX64" or os == "macOS-arm64"
    local retina_scale = 1
    if is_mac then
        retina_scale = gfx.ext_retina
    end

    local font_size = layout.font_size * gfx.ext_retina
    gfx.setfont(1, layout.font, font_size)
    longest_key = gfx.measurestr(longest_key)
    longest_name = gfx.measurestr(longest_name)

    local nonHiddenActionCount = 0

    for _, action in ipairs(actions) do
        if not action.hidden then
            nonHiddenActionCount = nonHiddenActionCount + 1
        end
    end

    local padding = layout.padding * retina_scale
    local line_offset = layout.line_offset * retina_scale
    local desc_offset = layout.desc_offset * retina_scale
    local desc_position = padding + longest_key + desc_offset
    local height, width
    if layout.height ~= nil then
        height = layout.height * retina_scale
    else
        height = padding * 2 + nonHiddenActionCount * gfx.texth + (nonHiddenActionCount - 1) * line_offset
    end
    if layout.width ~= nil then
        width = layout.width * retina_scale
    else
        width = desc_position + longest_name + padding
    end

    -- On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.
    -- On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.
    -- On Windows, windows will appear by default at the bottom right of mouse cursor
    -- On macOS, windows will appear by default at the top right of mouse cursor
    if layout.first_frame then
        layout.first_frame = false
        layout.flash_time = nil
        layout.flash_action = nil
        local x, y = reaper.GetMousePosition()
        if is_mac then
            if layout.pos_mode == 0 then
                --Mouse position
                local left = x
                local bot = y
                local right = x + (width / retina_scale)
                local top = y + (height / retina_scale)
                if layout.mouse_h_align == 1 then
                    left = left - (width / retina_scale) / 2
                    right = right - (width / retina_scale) / 2
                elseif layout.mouse_h_align == 2 then
                    left = left - (width / retina_scale)
                    right = right - (width / retina_scale)
                end
                if layout.mouse_v_align == 1 then
                    top = top - (height / retina_scale) / 2
                    bot = bot - (height / retina_scale) / 2
                elseif layout.mouse_v_align == 2 then
                    top = top - (height / retina_scale)
                    bot = bot - (height / retina_scale)
                end

                local screen_left, screen_top, screen_right, screen_bot = reaper.JS_Window_GetViewportFromRect(10, 10, 10
                , 10
                , true)


                if left <= 0 then
                    right = right - left + 1
                    left = 1
                elseif right >= screen_right then
                    left = left - (right - (screen_right - 1))
                    right = screen_right - 1
                end

                if bot <= 0 then
                    top = top - bot
                    bot = 1
                elseif top >= screen_top then
                    bot = bot - (top - (screen_top - 1))
                    top = screen_top - 1
                end

                layout.pos_x = left
                layout.pos_y = bot
            end
        else
            if layout.pos_mode == 0 then
                local left = x
                local top = y
                local right = x + width
                local bot = y + height
                if layout.mouse_v_align == 0 then
                    bot = bot - height
                    top = top - height
                elseif layout.mouse_v_align == 1 then
                    bot = bot - height / 2
                    top = top - height / 2
                end
                if layout.mouse_h_align == 1 then
                    left = left - width / 2
                    right = right - width / 2
                elseif layout.mouse_h_align == 2 then
                    left = left - width
                    right = right - width
                end

                -- credit @nofish
                -- acount for multi-monitor setups
                -- https://forum.cockos.com/showpost.php?p=1883879&postcount=4
                -- use current mouse position for the second (multimonitor) rectangle
                local screen_left, screen_top, screen_right, screen_bot = reaper.my_getViewport(10, 10, 10, 10, x, y,
                    x + 10, y + 10, true)

                if left <= 0 then
                    right = right - left + 1
                    left = 1
                elseif right >= screen_right then
                    left = left - (right - (screen_right - 1))
                    right = screen_right - 1
                end

                if top <= 0 then
                    bot = bot - top + 1
                    top = 1
                elseif bot >= screen_bot then
                    top = top - (bot - (screen_bot - 1))
                    bot = screen_bot - 1
                end

                layout.pos_x = left
                layout.pos_y = top
            end
        end
    end
    local pos_x = layout.pos_x
    local pos_y = layout.pos_y

    local char = gfx.getchar()
    local unmatched = char > 0
    local cap = gfx.mouse_cap
    local mouse_down = cap & 1 == 1
    local clicked = false
    if not layout.mouse_down and mouse_down then
        clicked = true
    end
    layout.mouse_down = mouse_down
    local cmd = cap & 4 == 4
    local shift = cap & 8 == 8
    local alt = cap & 16 == 16
    local ctrl = cap & 32 == 32
    local exit = false
    local command = nil

    if shown then
        if not layout.shown then
            -- Only on first shown frame
            reaper.JS_Window_SetZOrder(layout.hwnd, "TOPMOST")
            reaper.JS_Window_SetOpacity(layout.hwnd, "ALPHA", 1)
            layout.shown = true
        end
        -- an empty string resizes and reposition current gfx window
        gfx.init("", width / retina_scale, height / retina_scale, 0, pos_x, pos_y)
        gfx.update()
        SetColor(layout.background_color)
        gfx.rect(0, 0, width, height, true)
        gfx.y = padding
    end
    local actionDrawn = 1
    for i, action in ipairs(actions) do
        local wasDrawn = false
        if action.text ~= nil then
            gfx.x = desc_position
            SetColor(layout.foreground_color)
            gfx.drawstr(action.text)
            wasDrawn = true
        else
            local key_pressed = char == action.key and action.cmd == cmd and action.shift == shift and
                action.alt == alt
                and
                action.ctrl == ctrl
            if action.hidden then
                if key_pressed then
                    if action.native then
                        command = action.action
                    else
                        command = reaper.NamedCommandLookup(action.action)
                    end
                    if action.exit then
                        exit = true
                    end
                end
            else
                wasDrawn = true
                gfx.x = padding
                local hover_mid = gfx.y + gfx.texth / 2
                local hover_top = math.max(0, hover_mid - line_offset / 2 - gfx.texth / 2)
                local hover_bot = math.min(gfx.h, hover_mid + line_offset / 2 + gfx.texth / 2)
                local is_hover = gfx.mouse_x >= 0 and gfx.mouse_x <= gfx.w and gfx.mouse_y >= hover_top and
                    gfx.mouse_y < hover_bot
                local is_flashing = layout.flash_action == i and reaper.time_precise() - layout.flash_time < 0.1
                if is_flashing then
                    SetColor(layout.flash_color)
                elseif key_pressed or (is_hover and clicked) then
                    SetColor(layout.flash_color)
                    layout.flash_action = i
                    layout.flash_time = reaper.time_precise()
                    if action.native then
                        command = action.action
                    else
                        command = reaper.NamedCommandLookup(action.action)
                    end
                    if action.exit then
                        exit = true
                    end
                elseif is_hover then
                    SetColor(layout.hover_color)
                else
                    SetColor(layout.foreground_color)
                end
                if shown then
                    gfx.drawstr(action.key_text)
                    gfx.x = desc_position
                    gfx.drawstr(action.display_name)
                end
            end
        end
        if wasDrawn then
            if actionDrawn ~= nonHiddenActionCount then
                gfx.y = gfx.y + gfx.texth + line_offset
            end
            actionDrawn = actionDrawn + 1
        end
    end
    if command ~= nil then
        unmatched = false
    end
    return char, command, exit, layout.hwnd, unmatched
end
local actions = {
    {
        hidden = false,
        display_name = "Orchestration Toolbar",
        key = 111,
        shift = false,
        alt = false,
        action = 41681,
        command_exists = true,
        key_text = "o",
        native = true,
        action_text = "Toolbar: Open/close toolbar 3",
        exit = true,
        ctrl = false,
        cmd = false,
    },
    {
        hidden = false,
        display_name = "ReaCoMa Toolbar",
        key = 114,
        shift = false,
        alt = false,
        action = 41680,
        command_exists = true,
        key_text = "r",
        native = true,
        action_text = "Toolbar: Open/close toolbar 2",
        exit = true,
        ctrl = false,
        cmd = false,
    },
}
local style = {
    flash_color = 16733525,
    line_offset = 5.0,
    shown = false,
    font = "Verdana",
    background_color = 0,
    desc_offset = 20.0,
    padding = 20.0,
    first_frame = true,
    mouse_h_align = 0,
    foreground_color = 16777215,
    size_mode = 0,
    mouse_v_align = 0,
    pos_mode = 0,
    font_size = 13.0,
    hover_color = 16755370,
}
if reaper.JS_Window_Find == nil then
    reaper.ShowMessageBox("This script requires js_ReaScriptAPI", "Missing dependency", 0)
    return
end

local prev_focus = reaper.JS_Window_GetFocus()
local close_on_unmatched = false
local show_after = 0.0
local time_start = reaper.time_precise()
local shown = false
--SEC:MAIN
function main()
    if not shown and reaper.time_precise() - time_start > show_after then
        shown = true
    end
    local char, command, exit, hwnd, unmatched = UI(actions, style, shown, "KeySequenceListenerToolbars")
    if unmatched and close_on_unmatched then
        exit = true
    end
    -- Exit before calling the action if necessary
    if exit then
      gfx.quit()
      reaper.JS_Window_SetFocus(prev_focus)
    end
    if command ~= nil then
        reaper.Main_OnCommand(command ,0)
        if not exit then
            reaper.JS_Window_SetFocus(hwnd)
        end
    end
    --stop on unfocus
    if reaper.JS_Window_GetFocus() ~= hwnd then exit = true end
    if exit then gfx.quit() return end
    --stop deferring if window is closed
    if char ~= -1 then reaper.defer(main) end
end

main()
